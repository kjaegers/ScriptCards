ScriptCards Roll20 API Script Changelog

v 3.0.10 EXPERIMENTAL:
- ScriptCards can now read and update bio, notes, and gmnotes fields

v 3.0.00 EXPERIMENTAL:
- Restructured the script to run as an async construct. This is the *BIG* reason this is experimental. I've been testing with things like the 5E action menu successfully, but I'm sure there are edge cases I haven't though to test yet. If you run into issues with this version of ScriptCards impacting existing scripts/games please let me know. Ideally, everything should perform identically to the version2.7.36 for existing games and scripts.

- Initial support for accessing/setting items on Beacon sheets. This is implemented with updates to existing structures as follows:
  [*...:c-attribute] will use the new "getSheetItem" code implemented by TheAaron, which can access standard and beacon style attributes.
  --!c:...|c-attibute:value will use the new "setSheetItem" code.

  Please note that the [*...] code for c- items does not currently implement the ability to define defaults within the reference. Right now, all reads and sets apply to the "current" values for attributes (as opposed to "max"). Support for max values (or other types on beacon sheets if they are implemented) will be added in the future.

  ALSO NOTE: Beacon sheets only have their attributes exposed when using the Experimental version of the Roll20 sandbox.

Here is an example using these methods to read the "hp" attribute from a D&D 2024 sheet and setting the HP randomly from 1 to 20:

!script {{
  --&id|@{selected|character_id}
  --+Current HP|[*[&id]:c-hp]
  --=NewHP|1d20
  --+Setting hp|to [$NewHP]
  --!c:[&id]|c-hp:[$NewHP.Raw]
  --+New HP|[*[&id]:c-hp]
}}

v 2.7.36:
- Added trigger support for "chat:message". This should be considered EXPERIMENTAL at this time. You can create attributes on your ScriptCards_Triggers mule with names beginning with "chat:message:" and then the text you want to watch for in a chat message. If a chat message show up containing your text, the related trigger will fire. There are some special considerations for chat:message triggers:
  o The existence of chat:message triggers is checked when the sandbox starts. If you do not have any, and then add one, you will need to restart the Roll20 sandbox to enable the feature. Once enabled, you can add additional triggers without restarting. If you remove all chat:message triggers, the feature will still be enabled until the sandbox restarts.
  o Space cannot be typed in ability names and get replaced with dashes. The code that detects the trigger match will replace dashes with spaces in both the chat content and the trigger name (only for the check - it won't change the actual content).
  o Unlike other triggers, chat:message triggers MUST be ScriptCards, and MUST have a --/|TRIGGER_REPLACEMENTS section. This is because a hidden (invalid) HTML element is inserted in a --+ like to prevent a chat:message trigger from cascading if the script output contains the trigger phrase.
  o The following replacements are made, though they may not all be useful:
    &TriggerWho - The Display Name of the person that sent the message
    &TriggerPlayerID - The ID of the sending player - note that for API messages, this may not be what you would think.
    &TriggerType - The Roll20 message type (general, rollresult, gmrollresult, emote, whisper, desc, or api)
    &TriggerContent - The full content of the message
  o The phrase is CASE SENSITIVE
  o Note that this is a very early experimental implementation. It needs to be tested and expanded.
  
  An example:
  Ability Name: chat:message:FAILED-1-of-3
  Action:
  !script {{
    --/|TRIGGER_REPLACEMENTS
    --+Player [&TriggerWho]|failed their first death save!
  }}

  At the moment, Some messages may not be extremely useful, and if there is a need to do full inline roll parsing, that is something I'm going to have to look into and take some time to work on (and I can't promise it wil happen any time soon)

v 2.7.35a:
- Bug fix for broken chage:attribute:* triggers

v 2.7.35:
- Added "brtolinefeeds" to allow for the reversal of the "striplinefeeds" function in 2.7.34. Note that striplinefeeds now has an alias of linefeedstobr as well.

v 2.7.34:
- Added the string funciton "striplinefeeds" which will removed \r and \n characters and replace them with <br>.
  --~Result|string;striplinefeeds;InputString
  InputString would usually be a [&VariableReference]
- Added string function bytes which takes the NAME of a string variable and logs the byte value for each character to the console log.
  --~|string;bytes;MyCoolString

v 2.7.33:
- When using [$string(#,#)] to get substrings, if the second number is negative, that many characters will be trimmed from the end of the string.

v 2.7.32:
- New function hashtable;fromjson which can convert a JSON string into a hashtable. The syntax is:
  --~|hashtable;fromjson;hashtablename;JSONSTRING (all ";" will simply be concatenated into the JSONSTRING)
  Where jsonstring is the JSON string to convert and hashtablename is the name of the hashtable to create. If the hashtable already exists, it will be overwritten.

v 2.7.31:
- New function group: "roll". one subfunction for now: setrollhighlight, which will set the highlight color for a roll variable. The syntax is:
  --~|roll;setrollhighlight;Roll Var Name;identifier
  
  Where roll var name is the case sensitive name of the roll variable and identifier is one of: none, crit, fumble, both

- Code standardization and cleanup, slight performance improvements

- When using --!t you can prefix the property names with t- or T- and they will be mapped to the right values

v 2.7.30b:
- Added a log message if you try to set imgsrc to a marketplace image, as this isn't supported by Roll20 thru the API

v 2.7.30a:
- Bug fix for --!ot: when the property value has a | in it. Like values with a :, the value should be in double quotes.
- When setting the sides property through --!ot:, each side image will be checked for Roll20 validity (requires a ?... at the end)

v 2.7.30:
- Added the ability to create graphic objects (tokens, maps, etc.) with --!ot:. The syntax for this is:
   --!ot:ReturnTID|Property1=Value1|Property2=Value2;...
If a property value contains (or could contain) a colon (:) character, enclose it in double quotes ("). Numeric values will be checked for validity and assigned 0 if the passed value is not convertable to a number (ie, left=HELLO will result in left=0). Boolean values will be converted from "true", "yes", "on", or "1" to true and will otherwise be false.

A handful of graphic properties, if not specified will have defaults:
  subtype = token
  layer = objects
  pageid = current player ribbon page
  left = 200
  top = 200
  width = 70
  height = 70

Example copy a token and place it 1 square to the right of the selected token (does not copy ALL properties, just the ones specified):

!script {{
  --&sourceTID|@{selected|token_id}
  --#sourcetoken|[&sourceTID]
  --!ot:NewTID|name:"[*S:t-name] Copy"|left:[=[*S:t-left]+70]|top:[*S:t-top]|width:[*S:t-width]|height:[*S:t-height]|imgsrc:"[*S:t-imgsrc]"|tooltip:"[*S:t-tooltip]"|bar1_value:"[*S:t-bar1_value]"|bar1_value:"[*S:t-bar1_value]"| bar1_max:"[*S:t-bar1_max]"| bar2_value:"[*S:t-bar2_value]"| bar2_max:"[*S:t-bar2_max]"| bar3_value:"[*S:t-bar3_value]"| bar3_max:"[*S:t-bar3_max]"|bar1_link:[*S:t-bar1_link]|bar2_link:[*S:t-bar2_link]|bar3_link:[*S:t-bar3_link]|represents:[*S:t-represents]|controlledby:[*S:t-controlledby]|showname:1|statusmarkers:[*S:t-statusmarkers]
  --+TID|[&NewTID]
}}

- Added the "object" function class, which right now has one subfunction and one operation for that subfunction - the deletion of tokens:
  --~|object;token;delete;tokenid1;tokenid2;...
If used, a log entry will be written to the console stating the player that deleted to token and the token id.

v 2.7.29:
- Added initial support for "Beacon" SDK character sheets by modifying the [*...] code to allow nested name references. For example, the Candela Obscura character sheet defines an attribute named "role" which looks like this internally:

{"name":"role","current":
  {"role":{"description":"","name":"Face"},
   "specialty":{"description":"","name":"Magician"}
},
"max":"","_id":"-O4tZZXLjeIL3uex_74R","_type":"attribute","_characterid":"-O4tZTQ4Cyb5rBB5M0Wj"}

So "role" contains two entities: role and specialty. Each of these contains two items: description and name. To access the name of the role, you would use [*S:role->role->name], while to access the name of the specialty, you would use [*S:role->specialty->name]. This will return "Face" and "Magician" respectively. This can be used in any [*...] reference, so you can use it in a --+ line, etc. Here is an example of a script that will display the role and specialty of the selected token: 

!script {{ 
  --#sourcetoken|[@SC_SelectedTokens(0)]
  --+Role|[*S:role->role->name]
  --+Specialty|[*S:role->specialty->name]
}}

If the field(s) you are specifying don't exist, you will likely get either "undefined" (if the base attribute doesn't exist) or "Object.object" (if one of t he fields doesn't exist). Ex: [*S:role->focus->name] will return "Object.object" if the "focus" field doesn't exist in the "role" attribute, while [*S:superpower->name] will return "undefined" if the "superpower" attribute doesn't exist.

v 2.7.28:
- Updated the code that separates tags from content to allow for | characters to be used by escaping them with a double backslash (\\). Any \\| sequence will be replaced with a | character.
- Added two new conditional operators: -match and -imatch, which accept Regex as the right side of a comparison. Use \\| to escape the | character in the regex. The -match operator is case sensitive, while -imatch is case insensitive. A few examples:

  --?"[&name]" -match "(Medusa\\|Fred\\|Pixie)"|+Yes|+No
  Will be true if the [&name] variable has "Medusa", "Fred" or "Pixie" in it (case sensitive)

  --?"[&name]" -imatch "^(Medusa\\|Fred\\|Pixie)"|+Yes|+No
  Will be true if the [&name] variable starts with "Medusa", "Fred" or "Pixie" (case insensitive)

  --?"[&name]" -imatch "^a.*n$"|+Yes|+No
  Will be true if the [&name] variable starts with "a" and ends with "n" (case insensitive) (ex: Ancient Red Dragon, Aragorn, etc.) 

  --?[$Roll.Raw] -match "^[1-2]$"|+Yes|+No
  Will be true if the roll is a 1 or a 2 (won't match 12, or 20, etc because the 1 or 2 has to be the first AND last character)

  Regex values should be enclosed in quotes. If you want to actually look for a literal | in your regex, use \\\| (the first \ is included in the regex to escape the |, which will be the result of \\|)

v 2.7.27a:
- Using --!a| and specifying an attribute that doesn't yet exist (with the "!" prefix on the attribute name) will now create the attribute with a dummy value and then set it to the desired value with the sheetworker.

v 2.7.27:
- New setting: limitmaxbarvalues (default:0). If set to any non-default value, any use of --!t to set the value of a bar will be limited to the maximum value of the bar. 
- In --!a, --!t, and --c statements, it is now possible to include vertical bar (|) characters in the values by escaping them with a double backslash (ex: \\|)

v 2.7.26:
- Added code to replace \\[ and \\] with [ and ] in globally in script to allow [ and ] to be escaped

v 2.7.25:
- Minor error logging changes

v 2.7.24:
- Added "-csinc" and "-csninc" to the list of valid conditional operators. These are case sensitive versions of -inc and -ninc respectively.
- Updated the "+" and "*" options for conditials to output something so it won't duplicate the text in the tag and content if there is not a ";" in the string, which were also including the + or * character.

v 2.7.23:
- Fixed issues with destroy: triggers. All object properties will now be returned.
- Fixed a trigger variable issue that would return empty strings for "false" values

v 2.7.22:
- Console log message removed when using [=...]

v 2.7.21:
- Updated trigger attribute creation to handle entities with -- in their text. No changes needed to trigger scripts.

- New referencing syntax that allows a conditional to be used inline as part of a variable reference by using [?...]. The syntax is [?condition|TrueResult|FalseResult]

Ex: 
[?1 -eq 2|True|False] will return False, since 1 is not equal to 2
[?1 -lt 2|True|False] will return True, since 1 is less than to 2

Note that when using Roll Variable references in the conditional, it is advisable to use the .Raw, .Base, or other modifier except .Total or no suffix since these will both contain HTML code. [?...] can be nested as evaluation happens from the inside out.

Ex:
  !script {{
    --=Roll|1d20
    --=Roll2|1d20
    --+Roll|[$Roll]
    --+Roll2|[$Roll2]

    --+Test|Evaluation: [?[$Roll.Raw] -gt 10|Roll 1 is HIGH|Roll 1 is Low]
    --+Test|[?[$Roll.Raw] -gt 10|[?[$Roll2.Raw] -gt 10|Both High|First high]|first or both low]
  }}

You CAN nest additional [?...] statements inside the TrueResult or FalseResult sections, but you must be careful to balance the brackets. Also, you CANNOT have two open or close brackets in a row ([[ or ]]) as Roll20 will try to interepret this as an in-line roll and throw an error. Separate them with spaces. In the example below, the ] ] ] sequence is separated with spaces to prevent this from happening. (There is sadly nothing I can do about this, as it is a Roll20 limitation).

Ex:

  !script {{
    --=Roll|1d20 + @{selected|strength_mod} [STR] + @{selected|pb} [PROF]
    --&HitType|[?[$Roll.Base] -eq 20|Crit|[?[$Roll.Base] -eq 1|Fumble|[?[$Roll.Base] -ge @{target|npc_ac}|Hit|Miss] ] ]

    --+Roll Info|[$Roll] - [&HitType]
  }}

v 2.7.20:
- Extended multiple trigger functionality to all triggers
- Added "hash" to system;dumpvariables (ie, --~|system;dumpvariables;hash) to show all hash tables

v 2.7.19:
- Added the ability to have multiple change:attribute triggers for the same attribute. This change will be coming to all attributes shortly

v 2.7.18a:
- array;statusmarkers will now exclude anything that is actually empty in the statusmarkers list

v 2.7.18:
- Bug fix for pagetokens without a filter returning nothing

v 2.7.17:
- Fixed a bug in bysectionid repeating section lookup that was setting repeatingindex to undefined

v 2.7.16:
- Corrected bug with [=...] syntax when specifying a variable name. The result would always be 0. This has been corrected and will properly assign the value to the variable. (ex: [=result:1d20])

v 2.7.15:
- Creating a has from a repeating section now includes a _sectionid attribute

- Added hashtable function: fromrepeatingrow, which will create a hashtable of the content of a repeating section row on a given character. The required parameters are a character ID, the name of the repeating section, the section row id, and the name of the hashtable.

Example (combined with fromrepeatingsection) using the 5E sheet with a PC:

!script {{
  -=/|Load the character's Attacks into the MyAttacks hash
  --~|hashtable;fromrepeatingsection;@{selected|character_id};repeating_attack;atkname;MyAttacks
  
  --/|Create a list of keys from the hash table
  --~|array;fromkeys;Keys;MyAttacks
  
  --/|Find the row containing the "Longsword +3_sectionid"|
  --&FoundSection|[:MyAttacks("Longsword +3_sectionid")]

  --/|Display Section ID
  --+|[hr][c]Section Info[/c]
  --+Found Section|[&FoundSection]

  --/|Create a hash table based on the section row id
  --~|hashtable;fromrepeatingrow;@{selected|character_id};repeating_attack;[&FoundSection];Longsword3

  --/|Display the results
  --+|[hr][c]One-Off Property Access[/c]
  --+itemid|[:Longsword3("itemid")]
  --+dmgtype|[:Longsword3("dmgtype")]

  --+|[hr][c]All Row Properties[/c]
  --~|array;fromkeys;Keys;Longsword3
  --%loop|foreach;Keys
    --+[&loop]|[:Longsword3("[&loop]")]
  --%|
}}

v 2.7.14:
- Added support for add:character and change:character events as Triggers. Your trigger for add:character will receive [&CharAdded], containing the ID of the added char. For change:character you will receive [&CharChanged] with the char id and the series of [&CharOld...] and [&CharNew...] for properties that changed as with other triggers.

v 2.7.13:
- Bug fix for pagetokens returning an empty array

v 2.7.12:
- New array function: fromrepeatingsection, which will create a hashtable of the content of a repeating section on a given character. The required parameters are a character ID, the name of the repeating section, the field in the repeating section that identifies the row, and the name of the hashtable.

ex: --~|hashtable;fromrepeatingsection;@{selected|character_id};repeating_attack;atkname;MyAttacks

This will create a hashtable called "MyAttacks" with the atkname field as the key and the full row as the value. This can be used to create a lookup table for repeating section entries.

The hashtable keys will be in the format RowIdentifier_AttributeName, for example: [:Test("Greatsword_atkdmgtype")]

Each entry will also have a _max version (--+Greatsword|[:Test("Greatsword_atkdmgtype_max")]) which is normally empty.

There are some repeating attributes that are unsupported. These include attributes with @{...} references, and attributes that include either [[ (for an inline roll) or {{ (for a template reference). These entries in the hash table will still be created, but have values of Unsupported (AttrRef), Unsupported (InlineRoll) or Unsupported (TemplateRef) respectively.

v 2.7.11:
- Expanded array;pagetokens filter syntax to allow:
  - Multiple filter values - separated by semicolons. Filters are cumulative and can only remove items from the returned list. For example, specifying npc;pc will always return no results because the PCs will be removed when "npc" is processed, and the NPCs will then be removed by the "pc" filter

  - New Filters:
    attr, prop, and tprop. each of these filters can accept attribute/propert name, and a comparitor value. The property name and value are separated by = for an exact match or ~= for a partial match. The property name is case sensitive, but the match is not.
    - attr:characterAttributeName=value
    - attr:characterAttributeName~=partialvalue
    - prop:characterPropertyName=value
    - prop:characterPropertyName~=partialvalue
    - tprop:tokenPropertyName=value
    - tprop:tokenPropertyName~=partialvalue
  
    Examples:
    --~|array;pagetokens;Tokens;@{selected|token_id};tprop:tooltip~=hello
      returns all tokens on the page with the selected token that have a token "tooltip" property with "hello" in it

    --~|array;pagetokens;Tokens;@{selected|token_id};attr:npc_type~=undead
      returns all tokens on the page with the selected token that have a character attribute "npc_type" with "undead" in it

    --~|array;pagetokens;Tokens;@{selected|token_id};npc;tprop:name~=Dr
      returns all NPC tokens on the page with the selected token that have a token property "name" with "Dr" in it. Note the use of multiple filters (NPC, followed by tprop)

    Note that there are very few useful character properties, but the ability to search them is included for completeness.

v 2.7.10:
- Fixed --s#, which had a typo and wasn't working at all...
- Added the ability to specify "allsettings" as the content for --s and --l to save/load full setting sets
  ex: 

  !script {{
    --#title|Test All Save
    --#leftsub|New Left Test
    --#rightsub|New Right Test
    --#whisper|gm
    --s#AllTest|allsettings
  }}

  The above will set four settings and save them as "AllTest", while the below will load them all in:

  !script {{
    --l#AllTest|allsettings
  }}

  Note that you can still load individual settings from a set:

  !script {{
    --l#AllTest|title
  }}

v 2.7.9:

- Bug fix for table and table entry creation using --!o# and --!oe
- Trim the input text to account for scripts sent with leading spaces before the !script text

v 2.7.8:

- Changing changelog format to remove hard breaks and let word-wrapping determine line length. I've updated the log entries back to 2.7.6, but won't be going back further than that on revisions.

- Added array fromrollvar which will convert the array items in a roll variable into a standalone array. Syntax:
    --~|array;fromrollvar;ArrayName;RollVariableName;type
  where type is "rolled", "kept", or "dropped". NOTE that the roll variable name is just the name of the variable and not a [$rollvar] reference.

- Added built-in array variabls "args" which will be set to the parameters (arguments) passed to a GOSUB command. This means that you can use [@args(0)] in place of [%1%], etc. Note that arrays are zero-based. [@args(length)] and [@args(maxindex)] can be used to retrieve the number of parameters passed. The older [%x%] references still work, but you can use this to call a function with a variable number of parameters, or use a foreach loop for them, etc.

v 2.7.7b:

- Fix sandbox crash error in destroy:graphic trigger and added error handling to destroy:page and destroy:door code as well.

v 2.7.7a:

- The listen to tokenmod behavior defaults to off to prevent issues with existing code. You can set an attribute on the ScriptCards_Triggers character called 'listen_to_tokenmod' and make its current value 1 to enable this behavior

v 2.7.7:

- If you have a ScriptCards_Triggers character defined when your sandbox starts, ScriptCards will register to observe changes from Token-Mod and run the change:graphic trigger if it exists when tokenmod announces a change.

- Fixed "Line undefined is missing a | character" error message to now actually show the line number

v 2.7.6:
 - Added --~|array;attributes;ArrayName;charid;(optional 'name' starts with)
   Returns an array of IDs for attributes on a character. If the last parameter is specified, only attributes with names starting with that value will be returned.

 - Storing empty hash tables will now remove the attribute from the storage character

v 2.7.5a - Reverted the "replaceall" for [REPL] since it is useful as a comparitor to not do so.

v 2.7.5  - Updated [REPL] code for runaction to replace all instances of a given [REPLx] string in the action. Previously, only the first appearance of the marker was replaced.

         - Added function: --~|array;fromplayerlist;ArrayName
             Returns an array of all of the IDs of all of the players (that aren't GMs) in the game

         - Added function: --~|array;fromgmplayerlist;ArrayName
             Returns an array of all of the IDs of all of the GM players in the game

         - Added function: --~StringVar|system;playerisgm;playerpageid
             Will set the StringVar string variable to 1 if the passed playerid is a GM, otherwise will set it to 0

         - Added function: --~|array;fromcontrolledcharacters;ArrayName;playerid
             Will return an array of all of the characters controlled by the passed player

         - Updated [*O:...:character:...] to accept "isgm" as a psuedo property, which will return 1 if the player object is a GM and 0 if not.
             Ex: --+GM?|[*O:[&SendingPlayerID]:player:isgm]

v 2.7.4  - Added a new function: --~|system;runaction;character_id;abilityname;param1;param2;param3;param4;...
             This function will look for an ability called "abilityname" (case sensitive) on character "charcter_id" and read the Action property of the ability. It will replace the text [REPL1], [REPL2]...
             and so forth with the parameters passed in param1, param2, etc. The sequence -_-_ will be replaced in the final macro, allowing you to potentially add lines to anything that uses -- to separate
             parameters, etc. Note that the calls are issued by the API, so there is no current player, so interactive scripts will not do anything (ie, targets, roll queries, etc.) but if the action you
             are using takes ids, you can pass them as [REPL] items.

             Example: Given the SetMacro ability on the "Macro_Mule": !token-mod --ids [REPL1] --set statusmarkers|[REPL2][REPL3]
           
             This will turn on the blue marker:--~|system;runaction;@{Macro_Mule|character_id};SetMarker;@{selected|token_id};+;blue
             And this will turn it off: --~|system;runaction;@{Macro_Mule|character_id};SetMarker;@{selected|token_id};-;blue
           
             In these examples, [REPL1] gets replaced with the selected token id, [REPL2] gets replaced with either + or -, and [REPL3] gets replaced with blue. Obviously these can be variables or
             other ScriptCards constructs.

             Note that "runability" is an alias for "runaction"


           Removed some extraneous logging that might cause slowdowns in some scripts as junk was output to the API Console.

           Updated parsing code to completely ignore --/ lines by skipping the processing block if the tag stats with /

           Added optional parameter for Rbysectionid. If you add a ;1 to the end of the call, it will perform a case-insensitive match. This needs further testing, as I don't generally use bysectionid

v 2.7.3  - Added "!sc-purgestachedscripts" as an alternatively recognized command. This will clear from memory all script that have been "stashed", either by reentrant code or --i commands
           the only real effect here is to free up memory, as this happens automatically on a sandbox restart.

           Added "--rsearch", which has the same syntax as --rfind, except that it will do a case-insentitive partial match. This is converted to a regex, so if you need to find special regex
           characters (like +), prefix them with a "\".
           Ex: --rsearch|@{selected|character_id};sword;repeating_attack;atkname
           Will search for the first repeating_attack with an atkname containing "sword" and set the repeating index to that row.
           Ex2: --rsearch|@{selected|character_id};\+3;repeating_attack;atkname
           Will search for "+3" and return the first item containing it.

v 2.7.2  - Corrected bug where specifying a default value when setting an attribute resulted in an extra preceeding :

           Updated function benchmarking output to fix egregious typo and add the number of lines executed by the script to the output.

           Added --~|hashtable;getjukeboxtracks;HashTableName. This will create a hash table with the names of every jukebox track as keys and their object ID. It will also create keys with TrackName-playing, TrackName-loop, and TrackName-Volume. Here is a simple jukebox/soundboard
           Script:

           !script {{
             --#reentrant|jukebox

             --:SHOW_JUKEBOX|
             --#hidecard|0

             --~|hashtable;getjukeboxtracks;myhash
             --~|array;fromkeys;keys;myhash

             --%keys|foreach;keys
               --?"[&keys]" -ninc "-"|[
                 --+[&keys]|[r][rbutton]Play::PLAY_AUDIO;[&keys][/rbutton][/r]
               --]|
             --%|

             --+|&nbsp;
             --+|[c][rbutton]Refresh Jukebox::SHOW_JUKEBOX[/rbutton][/c]

             --X|

             --:PLAY_AUDIO|
             --#hidecard|1
             --a|[&reentryval]
             -X|
           }}

v 2.7.1b - Bug fix

v 2.7.1  - Rewrote distance functions to consolidate code, use better practices

           When using --~|turnorder;addcustom, you can now specify and additional parameter to determine where in the turn order the entry gets inserted. You can leave the custom counter and formula empty (;;;) if you don't want to specify them, but the semicolons must be there. The available placement options are "top", "bottom", "before:tokenid", "after:tokenid" 
           Ex: --~|turnorder;addcustom;My Fancy Custom Turn;99;-1;after:@{selected|token_id}

v 2.7.0  - Major refactoring of the ScriptCards code to improve maintainability and be more friendly to the sandbox.

           Added the --z command to edit z-order information for objects. --z:objecttype:objectid|operation
           currently supports tofront and toback for graphics. Will support additional items/options when the March 2024 API update is released.

           Added --#storagecharid setting to allow you to specify a character ID for future --s and --l statements (in the currently running script)
           
           Added --#gmoutputtarget setting which defaults to "gm". If you set this to "self" the output of --* lines will be whispered to the player executing the script. You can also set this to any other valid whisper target.
           
           Added --#functionbenchmarking which defaults to 0. Set to 1 to turn on some basic statistics about calls to functinos (with -->). After your script finishes running the number of calls to each called function will be reported in the API console log as well as the number of milliseconds the script took to run.

           Added --~|array;fromkeys;ArrayName;HashTableName will create an array with all of the keys in a given hashtable
           
           Added --~|hashtable;fromobject;HashTableName;objecttype;objectid   Ex: --~|hashtable;fromobject;myhash;character;@{selected|character_id}
           this function will look up the given object and parse out all attributes (except bio, notes, and gmnotes) into a hashtable with key/value 
           pairs equal to the attribute names and values.

             Example:
               !script {{
                 --~|hashtable;fromobject;myhash;graphic;@{selected|token_id}
                 --~|array;fromkeys;keys;myhash
 
                 --%keys|foreach;keys
                   --+[&keys]|[:myhash("[&keys]")]
                 --%|
               }}

           Added --~|hashtable;getplayerspecificpages;HashTableName   Retuns a hash with the contents of the Campaign's playerspecificpages object, which
           will have player IDs as keys and page IDs as values for those entries.

           Added --~|hashtable;setplayerspecificpages;HashTableName  Will set the Campaign's playerspecificpages object. The source hash table should contain
           player IDs as keys and page IDs as values for them. Leave off the hash table name (but include the semicolon (;)) clear the value and return
           all players to the ribbon page.

           New Pre-Set String Variable: [&SC_VERSION_NUMERIC], which will contain the version number in the format 0X0Y0Zr, where X is the major version,
           Y is the minor version, Z is the update number, and r represents the occasional "a", "b", etc. versions. All components are numeric, so v2.7.0 
           will be represented as "207000" (2=2, 07=7, 00=0, and 0=no fix update), while a theoretical 2.7.0a would be "207001". This can be used to require
           a specific minimum version of ScriptCards or to change the behavior of the script depending on the version. For example, assuming this had existed
           for 2.6.6b, the following line:
               --?"[&SC_VERSION_NUMERIC]" -eq "" -or "[&SC_VERSION_NUMERIC]" -lt 206062|REPORT_BAD_SC_VERSION
           would check for that minimum version number.

V 2.6.6b - When setting repeating section values, if the attribute doesn't exist it will be created, even without prefixing it with "!".

v 2.6.6a - Automatically replace "Dimming" with "Dimming_0" when setting night_vision_effect

v 2.6.6  - Borrowed code from token-mod to force lighting refresh after graphic/token properties are modified via --!

v 2.6.4  - Changed the default specifier for [*...] references from :: to ::: to not interfere with staus marker names.
           NOTE: this may be a breaking change if your scripts currently use ::

v 2.6.3  - Small change to the way trigger abilities are detected to correct a non-optional code pattern

v 2.6.2c - Minor bug fix

v2.6.2b  - fixed misspelling of "concatenationcharacter". The misspelled version is now an alias of the right version

v 2.6.2a - Fix for add:graphic trigger running too fast

v 2.6.2  - Added functions to support hashtables:

           --~|hash;clear;HashTableName
             Removes all key/value pairs from the given hashtable

           --~|hash;set;HashTableName;Key1==Value1;Key2==Value;...
           
             Sets key/value pairs in the given hashtable. Ex: --~|hash;set;Fruits;Mango-Cost==2sp;Mango-Size==Medium;Mango-Shape==Oblong
          
           Note that for the function group you can use "hash" or "hashtable".

v 2.6.1  - New setting - concatenationcharacter, which will allow you to set an alternative to starting string assignments with "+" to append.
           This setting defaults to "+", but can be set to another single character if you need to include "+" symbols at the beginning of
           your string variables. This is a per-line setting, so can be changed and changed back as needed.

           Setting a hash table key value to an empty string will now remove the key from the table:

           ex: --hFruits("Steak")|

           will remove the Steak entry from the Fruits table. Previously the key would remain but the value would be blank. 

v 2.6.0  - Note: This update should be considered EXPERIMENTAL for now. While I have tested the nw features and looked for anything that might
           have impacted existing scripts, there is always the possiblity that I missed something. It will be a couple of weeks before this update
           heads for OneClick in order to provide time to find and fix bugs.

           Added support for Hash Tables (sometimes called Associative Arrays). You can define hashtable elements with the --h command like this:

              --h:HashTableName("Key")|Values

           so:
              --h:FruitCost("Mango")|2sp

           Will set the "Mango" entry for the "FruitCost" hashtable to 2sp (creating the hashtable if necessary).

           You can reference the value of a hashtable item with [:HashTableName("Key")]. In both cases, Key can be a variable:

             --&Fruit|Apple
             --+[&Fruit]|costs [:FruitCost("[&Fruit]")]
          
           The double-quotes around the Key are required.

           Here is an example of using delimiters to store multiple pieces of information about an item in a hash table:

           !script {{
             --h:Fruits("Mango-Cost")|2sp
             --h:Fruits("Mango-Size")|Medium
             --h:Fruits("Mango-Shape")|Oblong
           
             --h:Fruits("Apple-Cost")|2cp
             --h:Fruits("Apple-Size")|Medium
             --h:Fruits("Apple-Shape")|Round
           
             --h:Fruits("Watermelon-Cost")|1gp
             --h:Fruits("Watermelon-Size")|Large
             --h:Fruits("Watermelon-Shape")|Oblong
           
             --h:Fruits("Grape-Cost")|1cp
             --h:Fruits("Grape-Size")|Small
             --h:Fruits("Grape-Shape")|Round
           
             --~|array;define;fruits;Apple;Mango;Watermelon;Grape
             --~|array;define;fields;Cost;Size;Shape

             --%fruit|foreach;fruits
               --%field|foreach;fields
                 --+[&fruit]-[&field]|[:Fruits("[&fruit]-[&field]")]
               --%|
             --%|
           }}           

           The --s and --l commands have been updated to allow for the storage of data types on a special character named "ScriptCards_Storage". After
           creating this character, you must restart the sandbox to use it. The new variations of --s and --l take an identifier character to determine
           what type of item(s) are being stored:

           --s$optionalprefix|  <-- Stores Roll Variables
           --s&optionalprefix|  <-- Stores String Variables
           --s@optionalprefix|  <-- Stores Arrays
           --s:optionalprefix|  <-- Stores Hash Tables
           --s#optionalprefix|  <-- Stores ScriptCards Settings

           --l$optionalprefix|  <-- Loads Roll Variables
           --l&optionalprefix|  <-- Loads String Variables
           --l@optionalprefix|  <-- Loads Arrays
           --l:optionalprefix|  <-- Loads Hash Tables
           --l#optionalprefix|  <-- Loads ScriptCards Settings
          
          You can store/load multiple variables of the same type at the same time:

          --s$|MyFirstNumber;MySecondNumber;Number3
          
          This will store three separate string variables. Note that the normal variable referencing IS NOT USED (ie, [$MyFirstString] as this will
          be replaced with the actual value of MyFirstString. We need to refer to the variable name itself)

          Items stored in this way are stored in attribute on the Storage character. You can transmog this character into other games as needed
          and all of your stored data will be preserved.

          The optional prefix can be used to store multiple variables with the same name - perhaps for different characters, scripts, etc.

          --s&fred|charactername
          
          Would store the variable on the character sheet in an attribute named "SCS_fred-charactername", while leaving the prefix off would store
          the variable as "SCS_-charactername". The various variable types have their own "SC" prefix, so different variable types with the same name
          won't collide. Ex. "SCS_-attack" is a string variable called attack, while "SCR_-attack" is a roll variable. The types are:

          SCR_ - Roll Variable
          SCS_ - String Variable
          SCA_ - Array
          SCH_ - Hash Table
          SCT_ - ScriptCards Setting

v 2.5.1  - Added the ability to specify default values for [*...] lookups for S, T, and IDs by including the desired default after a ::.
           For example: [*S:Height::50] will return the value of the Height attribute on the sourcetoken. If it can't find Height, it will
           return 50.

v 2.5.0  - You can now set "speakingas" with object modification by substituting a ^ charater for the pipe (|) normally used.

v 2.4.9a - Bug fix for .Trim vs .trim typo in the load settings code

v 2.4.9  - Bug fix for nested loops when the internal loop is a while/until loop.

v 2.4.8  - Added a reverse function for string referencing (ex: [&MyString(reverse)] which will return the string reversed front to back, so "Hello"
           will become "olleH")

           Added "bysectionid" to the --R repeating section command set. This will search a given repeating section for an ID set specified, which allows
           you to find repeating section entries that might be referenced elsewhere. Here is an example from the 5E sheet, which uses the itemid property
           of the repeating_attack setion to find the corresponding item in repeating_inventory:

           !script {{
             --Rfirst|@{selected|character_id};repeating_attack
             --&ItemID|[*R:itemid]
             --+ItemID|[&ItemID]
             --Rbysectionid|@{selected|character_id};repeating_inventory;[&ItemID]
             --+Item Name|[*R:itemname]
             --+Properties|[*R:itemproperties]
           }}


v 2.4.7  - Enhancements to stored settings management (!sc-liststoredsettings) 

v 2.4.6  - change:door, add:door, and destroy:door are now supported as events for Triggers. The variables supplied are:
           change:door - &OldDoor[property] and &NewDoor[property] (ie, &NewDoorisOpen, &OldDoor_id, etc.)
           add:door - &DoorAdded, which will be the _id of the door that was added
           destroy:door - &DoorRemoved[property] for each of the door object properties as it existed before destruction

           The various properties are listed here: https://wiki.roll20.net/API:Objects#Door

v 2.4.5  - Added the ability to create rollable tables and rollable table entries:

           --!o#:returnid|TableName;ShowToPlayers
           
           A table named TableName will be created. If ShowToPlayers is left out, the default will be no. You can use "true", "yes", or "1" to set
           this value to 1.

           --!oe:returnid|tableID;EntryName;Weight;Avatar
           
           An entry in table tableID will be created with EntryName as the text value. If weight is not specified, it will be 1. Weight MUST be
           specified if adding an Avatar image url, which must follow the Roll20 image rules.

           Example:

           !script {{
            --!o#:tableid|MySCTable
            --+Result|[&tableid]
            --!oe:entryid|[&tableid];Entry 1
            --!oe:entryid|[&tableid];Entry 2
            --!oe:entryid|[&tableid];Entry 3;2
            --!oe:entryid|[&tableid];Entry 4;6
            --!oe:entryid|[&tableid];Entry 5;10
          }}

          Will create a table called "MySCTable" and use the returned ID to add five entries into the table. The last three entries have weights
          of 2, 6, an 10.
 
v 2.4.4a - Another bug fix, this time related to [*...] referencing when an attribute name contains a colon

v 2.4.4  - Fix for the fix for [t] and [p] in 2.4.0 :)

v 2.4.3a - New string subfunction: replaceencoding will replace %xx codes in strings with their actual character equivalents. Currently supports
           angle, square, curly brackets, quotes, commas, percent, ampersand, parens, plus, minus, divide, and equals. Potentially additional codes
           could be added in the future.

v 2.4.3  - New referencing options for repeating section information. You can now use the following formats:

           [*R:character_id:sectionname:rowindex:attribute]
           [*R>character_id:sectionname:rowindex:attribute]
           [*R:character_id:sectioname:rowcount]

           The first structure will look up the "sectionname" repeating section (ie, repeating_npcattacks) on the character_id character,
           go to repeating row index "rowindex" and return the value of the attribute named "attribute", for example:

             [*R:@{selected|character_id}:repeating_npcaction:0:name]

           The second structure returns the full attribute name of the indicated row/attribute, allowing it to be used with --! commands:
             
             --!a:@{selected|character_id}|[*R>@{selected|character_id}:repeating_npcaction:0:name]:New Multiattack

           The third structure will return the row count for the given section and character id:

             [*R:@{selected|character_id}:repeating_npcaction:rowcount]

           Using either of these structures *WILL* modify the internally tracked repeating section information (from rfirst, rnext, etc), which
           means further [*R:] references can omit the character, section, and rowindex if you want to refer to the same char, section, and index

           Here is a sample script that will take the selected character and display all of the repeating_npcaction items (5E Sheet) and change
           anything called "Multiattack" to "New Multiattack":

           !script {{
             --=rows|[*R:@{selected|character_id}:repeating_npcaction:rowcount]
             --%loop|1;[$rows]
               --?"[*R:@{selected|character_id}:repeating_npcaction:[=[&loop]-1]:name]" -eq "Multiattack"|[
                 --!a:@{selected|character_id}|[*R>@{selected|character_id}:repeating_npcaction:[=[&loop]-1]:name]:New Multiattack
               --]|
               --&output|[*R:@{selected|character_id}:repeating_npcaction:[=[&loop]-1]:name]
               --?"[*R:attack_type]" -ne ""|&output;+ ([*R:attack_type], [*R:attack_damage])
              --+Action|[&output]
             --%|
           }}

v 2.4.2  - Fix for setting numeric token attributes with --!

v 2.4.1  - New array function: fromtableweighted, which will create repeated array items equal to the weight number for intems on a roll table

v 2.4.0  - Bug fix for roll flavor text starting with P or T being treated as paragraph/table formatting. 

v 2.3.9a - Bug fix for attribute creation trying to .startsWith a numeric value.

v 2.3.9  - Two new settings: #emotesourcetokenoverride and #emotetargettokenoverride. If one or both of these is set to a url, the token
           images in the emote area will be replaced with that image (source=left, target=right)

           New inline formatting tag: [roll]...[/roll] will format whatever is between the tags to look like a roll (hilighting around)
           the text. You can use [roll:c] and [roll:f] to colorize the box as a (c)rit or a (f)umble

v 2.3.8  - New enhanced string referencing function: split. Takes a delimiter and a zero-based index (ie, [&MyString(split,!,1)))
           Enhanced string reference methods can now use the "," (comma) character as part of the method by prefixing it with a \ (backslash):
           ex: [&MyString(split,\,,3)] will split MyString on the comma charcter (\,) and return the 4th item.

v 2.3.7  - New settings:  emotesourcetokensize and emotetargetokensize. Default for both is 50. Numeric only ("px" gets appended to the value)

           Internal changes to allow for validation of numeric-only settings. The two settings above are the only ones added at this point.

v 2.3.6  - How handles XdY>Zf<Q (roll XdY, count successes greater than Z, subtract failures less than Q)

v 2.3.5  - Fix for multiple buttons on the same output line that was broken in 2.3.3/2.3.4

v 2.3.4  - ScriptCards now supports "rolling with emphasis" with the XdYe formula. Rolling with emphasis returns the value furthest
           from the middle number on the dice, so rolling 2d20e and getting 5 and 12 will return 5, since it is further from 10 than
           12. If the rolls are equally distant from the center number, the higher roll is returned.

v 2.3.3  - [button], [sheetbutton], and [rbutton] objects now support optional tool-tip text. Include it in the opening tag after a colon:

           [rbutton:Perform a Skill Check]Skill Check::SKILL_CHECK[/rbutton]

           In this case, "Perform a Skill Check" will be the tool tip text if the user hovers over the button. This is compatible with the
           existing modifiers for button elements such as inline colors and font size. (As a side effect of the way the regex is written,
           the hover text can't end ing "px" since it will take that as a pixel size)

v 2.3.2  - Exiting a foreach loop as the result of a conditional will now preserve the control variable instead of incrementing it to
           the next value in the loop. Additionally, for consistency's sake, a foreach loop that exits normally will leave the control
           variable set to the last element of the array.

v 2.3.1  - Corrected a bug in the [*p:...] referencing when an active page has not been set.

v 2.3.0  - --! now supports setting "defaulttoken" property on a character.
           ex: --!c:[&MyCharID]|defaulttoken:[&MyTokenId]

v 2.2.9a - turnorder;addtoken and turnorder;replace token now accept optional parameters for custom and formula values. If you want
           to specify a formula, you must specify a custom value, but it can be blank.

           Ex: --~|turnorder;addtoken;@{selected|token_id};5;MyCustom;-1

v 2.2.9  - [p]...[/p] now support specifying style information in the opening [p] tag.
           Ex: [p style='font-size:smaller;']Hello World[/p]

v 2.2.8  - It is now possible to use images in button captions by using the [img]...[/img] formatting structure. It is wise to
           set the width and height properties in the [img...] opener.

v 2.2.7a - Fix for --!c not finding the character because it was looking for a "graphic" instead of a "character"

v 2.2.7  - Added 2 string functions: onlynumbers and nonumbers. string;onlynumbers;stringvalue will extract the numeric characters
           from a string and return the value (a leading - sign will be preserved). nonumbers will remove all numeric characters
           from the string and return the resulting value.

v 2.2.6  - When using attribute modification (--!a) and creating an attribute if it doesn't exist, += and -= will now properly set the
           newly created attribute the the expected value instead of the text string including += or -=. Thanks to Cindurion on the 
           Roll20 forum for catching this bug.

           Roll crit hilighting (green background) would not trigger on exploding dice because they could never technically be equal
           to the max value on the die. Green highlighting will now be triggered if the value of any die is greater than or equal to
           the number of sides on the dice, so an exploding die that explodes at least once will always be colored green.

           When using --!or commands to create repeating row sections, passing "%3A" as part of the value in replacement of a colon (:)
           will translate %3A to a colon in the stored result. Normally you can use a : to separate the current/max values and this
           prevented you from having a : in your attribute value. Simply replace acutal colons in your value strings with %3A before
           calling --!or and the value will be translated.

v 2.2.5  - &SendingPlayer... preset strings now get updated when resuming reentrant script with the ID of the player that caused the script 
           to resume. A new set of strings &OriginalSendingPlayer... are set when the script is initially executed and will remain the same.
           
v 2.2.4d - Extended the [F]...[/F] inline formatting code to allow a font to be specified. You can now use [F:fontname:fontsize]...[/F]
           which will create a span (instead of a div) changing the font name and size for that span. Technically the size can be left
           out, but the results may then be browser dependant on what happens when blank font size is used. The [F##]...[/F] structure
           remains unchanged and creats a div with the new font size in the current font.

           Added a new roll formula: XmY, which will roll X dice with Y sides but always return Y as the result. (ie, 4m8 will always
           result in 8,8,8,8 for the dice rolls) Note that this will be flagged in the roll text and hover over indicating that the
           rolls had a minimimum value and what it was (the roll text above would be "8 {MIN:8}, 8 {MIN:8, 8 {Min:8}, 8 {MIN:8}") to
           prevent hiding this type of roll. A message will also be sent to the API Console log listing the player that made the roll
           as well as the roll formula that was used. The intent here is to be able to use something like "[&DamageFormula(replaceall,d,m)]"
           for critical hit rolls for groups using the maximum roll result for criticals without needing to hardcode the critical
           values.

v 2.2.4c - Added the {PAD:X} roll modifier. If added to a roll, the Raw and Total results will be padded with leading zeros to make a value 
           at least X digits long. 
           Ex: --=$Roll|1d100 - 1 {PAD:2} 
           Will ensure that the output will always be a 2-digit number (ie, 03 instead of 3). If the padding length is less than the number
           of digits in the actual number, it will simply be ignored (123 and {PAD:2} will still be 123, and not 12 or 23)
         - Added setting #explodingonesandaces which, if set to 1, will count the 1s and Aces on the rerolled dice in an exploding die roll.
           For example, with this setting off (default) an exploding d6 of 6!6!1 will count as 1 ace and 0 ones. With this setting turned on
           this would count as 2 aces and 1 one.

v 2.2.4b - New dice rolling formula is now available: xUy, which is the same as xDy except that only unique rolls will be returned. In other
           words, if you wanted to roll 8d20, but only get non-repeating values, 8u20 would do so. The values of the dice are stored in a pseudo
           array in the .RolledDice component of the roll variable.

           Ex:

           !script {{
             --=Roll|8u20
             --+Roll|[$Roll]
             --%loop|1;8
               --+Roll [&loop]|[$Roll.RolledDice([&loop])]
             --%|
           }}

v 2.2.4a - Fixes an uncommon sandbox crash bug
           Adds the "fromtable" subcommand for the array function. Will create an array based on the contents of a table. Parameters are the
           name of the array, the name of the table (case sensitive) and what you want back from the table, which can be "name" for the text
           value of each entry, "image" for the image URL, or both for both items separated by a vertical bar.
           Ex: --~|array;fromrollabletable;MyNames;Map-Icons;name
               --~|array;fromrollabletable;MyImages;Map-Icons;image
               --~|array;fromrollabletable;MyIcons;Map-Icons;both
          
           Usage Example:
             !script {{
               --&vbar||
               --~|array;fromrollabletable;MyIcons;Map-Icons;both
               --+Array length|Names [@MyIcons(maxindex)]
               --%loop|foreach;MyIcons
                 --+[&loop(before,[&vbar])]|[r][img][&loop(after,[&vbar])][/img][/r]
               --%|
             }}

v 2.2.4  - Added the --\ command, which logs the content to the API console log. The tag portion of the command is ignored.
         - Started adding code to support event observers - Currently untested
         - It is now possible to compare two empty strings (ie, "" -eq "") and get the proper result. When testing a variable for being empty, always use quotes around it,
             ex: --?"[&Test]" -eq ""|
         - It is now possible to use math functions (ie, {MIN:X}, etc.) inside inline rolls ([=...])
         - Any parameter that sets a color (oddrowbackground, etc.) will now automatically add the # in front if it is passed a 3, 6, or 8 digit hex code string

v 2.2.3  - When creating repeating sections with --!or, ScriptCards will now create the attibutes with empty values first and then set them using ScriptWorkers
           to allow those to trigger properly. A new string variable (SC_LAST_CREATED_ROWID) will be set after using --!or to create a repeating row. This holds
           the internal row ID of the repeating section, so you could access/update the entries after creating by using "repeating_sectionname_[&SC_LAST_CREATED_ROWID]_attrname",
           where sectionname is the repeating section name and attrname is the individual attribute of the repeating row you want to work with.

v 2.2.2  - Corrected unnecessary message in the console log when setting template to "none".

           Added two new string referencing functions : before and after will return the portion of a string variable before or after the specified substring,
           or the entire string if it does not contain the search text.

           !script {{
             --&Line|The Quick Brown Fox Jumps Over the Lazy Dog
             --+Before|[&Line(before,Fox)]
             --+After|[&Line(after,Fox)]
           }}

           Added fromtable as an array creation command: --~tableCount|array;fromtable;MyArray;table-name will create an entry in the MyArray array for each
           entry in the table-name table, and store the number of items returned in a string variable called tableCount.

v 2.2.1  - Loop information is now stashed with saved scripts (as a result of --i or rbuttons), meaning a loop can continue to operate after being interrupted
           by an information request.

           Added "word" as a new expanded string referencing option. Supplying an index number of a word in the string will return just that word. Indexes start
           at 1, and can be negative to return the last word of the string. Index 0 returns the entire string:

           !script {{
             --&Line|The Quick Brown Fox Jumps Over the Lazy Dog
             --+Word 1|[&Line(word,1)]
             --+Word 5|[&Line(Word,5)]
             --+Last word|[&Line(word,-1)]
             --+Fourth from end|[&Line(word, -4)]
           }}

v 2.2.0  - ScriptCards now supports templates that override the visual appearance of an output card. These are based on the Genre Templates in Keithcurtis'
           Supernotes 0.2.0. If you have that mod installed, you will gain access to the 10 templates it contains. ScriptCards itself adds three templates
           to the mix, and you can define your own templates via a mule character.

           Keith's thread: https://app.roll20.net/forum/post/11173104/script-supernotes-0-dot-2-0-now-with-genre-templates/?pageforid=11173104#post-11173104
           Until it comes up on OneClick, you will need to download the temporary git version of the code (linked to near the bottom of the first post in
           that thread) and install it manually. This will give you access to Keith's tmeplates.

           To utilize a template, simply set the --#overridetemplate| option to the desired template (or "none" if you want to specify none, though that is the
           default setting). 
           
           The templates from Keith's mod are: generic, dark, gothic, crt, steam, scroll, apoc, faraway, lcars, notebook.
           ScriptCards defines: dnd5e, dnd1e_green, dnd1e_amber

           Note that using a template really is an override - none of your appearance settings (titlefone, button styles, etc.) will be used when displaying a
           ScriptCard with an override template.

           A template consists of six sections of CSS code (Keith defines two more that aren't used by ScriptCards): boxcode, titlecode, textcode, buttonwrapper, 
           buttonstyle, and footer. Note that in ScriptCards case, the button wrapper is output right before the end of the card, and doesn't actually do anything
           with buttons - it simply allows for the footer to be in the right spot. It should still be included to match the div counts, however.

           If you wish to define your own templates, create a character called "ScriptCards_TemplateMule" (case sensitive) and create an ability with the name
           of your template. The text of the ability MUST be constructed carefully, and I'll include a sample below. Essentially, you need one line for each of the
           six sections, with all "<" and ">" characters replaed with "{" and "}". Note that this means you won't be able to use curly braces inside the template.
           Each line begins with the name of the section (ie, boxcode) followed by two colons (::). Each line ends with two vertical bars (||). Leading spaces in the
           line will be removed automatically, as will line breaks. I suggest working on your styles in something like Notepad++ and pasting them over.

           You can refresh the available templates by running !sc-reloadtemplates from the chat window.

           Here is a simple example: (I'm not saying it *looks* good :))

           boxcode::{div style='background-color: #18769c; box-shadow: 0 0 3px #fff; display: block; text-align: left; font-size: 13px; padding: 5px; 
           margin-bottom: 2px; color: black; font-family: sans-serif; white-space: pre-wrap; line-height:1.3em; font-style:normal'}||
           titlecode::{div style='margin: 0.5em 1em 0.25em 1em; font-size: 16px; font-variant: small-caps; font-family: "Goblin One", sans-serif; color: #000; 
           display: block; margin-block-start: 1em; margin-block-end: 0; margin-inline-start: 0px; margin-inline-end: 0px; font-weight: bold;'}||
           textcode::{/div}{div}{div style='font-weight: normal; display: block; margin: 0 1em 0 1em;'}||
           buttonwrapper::{div style='display:block;'}||
           buttonstyle::style='display:inline-block; font-size: 10px; color:#000; padding: 2px 0px 2px 0px; background-color: transparent; border: 1px solid black; 
           text-align: center; border-radius: 0px;'||
           footer::

           Additional Notes:
           In 2.2.0e, some additional style line options were added. These are slightly different than the Supernotes style lines, but expand on them by allowing
           you to define style information for the subtitle, table components, and the h1..h5 HTML constructs (now parsed from [h1]...[/h1] thru [h5]...[/h5] by
           ScriptCards' inline formatting processor). These style lines are added to a templatemule ability as before except that they should only include the
           options that would go inside a style='...' block and not use single quotes (the are used to wrap the style block). The piece keys for these styles are:
           subtitlestyle, tablestyle, trstyle, thstyle, tdstyle, h1style, h2style, h3style, h4style, and h5style.

           Ex: subtitlestyle::font-size:24pt; font-family:Impact; color:red;

           As part of this change, you can also give a template mule ability the same name as an existing Supernotes/ScriptCards built-in style and override/add
           the pieces you wish based on the style guidelines above.


v 2.1.19 - Object creation now supports the creation of repeating rows via --!or. The syntax is: --!or:character_id:sectionName|value:current:max|value:current:max...
           For example, to create a language proficiency on the currently selected character (5E):

           --!or:@{selected|character_id}:proficiencies|prof_type:LANGUAGE|name:Abyssal
           
           The max portion is optional and can be left out if it doesn't make sense (as in the line above). A bit more complicated example is below. This creates a
           repeating_npcaction on the currently selected character (note that ScriptCards doesn't have a way to check to see if the section exists, it will just create
           the appropriate attributes on the character - again, this is a 5E example, but repeating sections on any sheet can be created as long as you know what
           attributes you need to specify and the name of the section):

           !script {{
             --!or:@{selected|character_id}:npcaction|
                name:Mega Bite|
                attack_flag:on|
                attack_type:melee|
                attack_target:one target|
                attack_range:5 ft.|
                attack_tohit:8|
                attack_damage:1d4 + 3|
                attack_damagetype:piercing|
                attack_tohitrange:+5, Reach 5ft., one target|
                attack_onhit:5 (1d4 + 3) piercing damage|
                attack_crit:1d4
           }}

           Note that this is all one ScriptCards line, and could be written that way. Placing each attribute/value pair on its own line makes it a bit clearer to read, though.

           ScriptCards will assume that the section starts with "repeating_" so it should not be specified in the section parameter (hence "npcaction" instead of "repeating_npcaction")

v 2.1.18 - Bug fix for what I broke in 2.1.17 :)

v 2.1.17 - Added the ability to create abilities with the --! command. The syntax is --!ob:ReturnVarName:CharacterID:AbilityName:IsTokenAction|Text of the Ability
           For example, this will create an abilitiy called "SayHello" on the selected character that runs the Lightning-Bolt ability from the Spell_Mule character.

           !script {{
             --&obrac|{
             --&cbrac|}
             --&perc|%
             --!ob:AbilID:@{selected|character_id}:SayHello:y|[&perc][&obrac]Spell_Mule|Lightning-Bolt[&cbrac]
             --+AbilID|[&AbilID]
           }}

           To break this line (--!ob:AbilID:@{selected|character_id}:SayHello:y|[&perc][&obrac]Spell_Mule|Lightning-Bolt[&cbrac]) down:
             --! is the start of an object moficiation command
             o means create a new object
             b means aBility ("A" would be reserved for attributes)
             AbilID is the string variable that the object id of the new ability will be returned to
             @{selected|character_id} is filled in with the Character ID of the currently selected character
             SayHello is The name of the ability that will be created
             y says that this ability should show up as a token action button when the token is selected
             [&perc][&obrac]Spell_Mule|Lightning-Bolt[&cbrac] is the text of the ability, with variables used on place of %, { and } to avoid having them
               processed by the chat server.

           You could also include references global macros by creating --&hash|# and placing that before the global macro name in the ability text, Ex:
           --!ob:AbilID:@{selected|character_id}:ActionMenu:y|[&hash]ActionMenu

v 2.1.16 - Adds the --w command, which has two related methods of use. --w#| (ie, --w5|) will sleep the sandbox for # seconds (up to 10)
           Note that this has limited usefulness and multiple delays could crash the sandbox by Roll20 thinking it entered an infinite loop.
           The second option is --w#:regularscriptcardsline, for example: --w5:a|CureLightWounds which would run the script normally and
           trigger the system to run the ScriptCard line indicated 5 seconds later. This is done by generating a mini ScriptCard containing
           that single line. Variable referencing is processed when this mini-card is generated. Example:
           
           !script {{ 
             --&SoundToPlay|Spell_FireBurst
             --w3:a|[&SoundToPlay]
             --w4:vtoken|@{selected|token_id} nova-fire
             --w5:!t:@{selected|token_id}|left:250
           }}

           This script will run and output the ScriptCards title. Three seconds later, the Spell_FireBurst audio track will play. One second
           after that, a nova-fire VFX will play at the selected token location, and finally a second after that the token will be moved 
           to x-position 250.

           Note: If the delayed command is a direct output (--+) or GM output (--*) command, the mini-ScriptCard will display the line as
           a new card with the title hidden.

v 2.1.15 - Added the ability to add an additional parameter to array;objects:type;filter to specify a character id for the object
           if it is appropriate. For example, to find all abilities for a given character: 
           --~|array;objects:ability;AbilArray;;@{selected|character_id}

v 2.1.14 - Added "removecustom" as a subfunction for turnorder. Allows for the removal, by custom name, of a custom entry in the
           turn tracker. Ex: --~|turnorder;removecustom;Round Counter

v 2.1.13 - When rolling on rollable tables [T#TableName] if the weights on all of the table entries are 1, the "dice roll" number will
           be saved to the .Total and .Base values for the roll. For any table with at least 1 weight greater than 1, the values will
           both be set to 0 since the roll value would be meaningless as the table gets expanded to account for weights. In addition,
           for all rollable table rolls, the Text and RollText values are now filled in as well, with Text being set to the roll table
           text value from the table (same as tableEntryText).

v 2.1.12 - Revamped the string setting commands (--&, --~|string, --? with a & result, etc.) to allow array element references to be
           set with them, so "--&fruits(1)|watermelon" will set the second element (the indexes start at 0) to "watermelon"). If the
           array does not exist, it will be created. If the element index is greater than the highest index in the array, the element
           will be added to the array. If the index is negative, the element will be added to the beginning of the array. If the index
           exists within the array, the current value for that element will be replaced.

           As indicated above, in addition to the --& command, the following types of commands will also work with this notation:
           
           --~fruits(1)|string;touppercase;grape
           --?1 -eq 1|&fruits(999);mango|&fruits(999);kiwi
           --c[$Result]|1:&fruits(999);apple|2:&fruits(999);banana|3:&fruits(999);watermelon
           
           IMPORTANT NOTE: If you have ScriptCards code that uses numbers in parenthesis after string names (ie, Boom(5), this will be
           a breaking change to that code, though this should be very, very uncommon) 

v 2.1.11 - New String function : stripchars removes all occurrances of any of a given set of 
           characters from a string:
           --~output|string;stripchars;{}";[&MyInputString]
           would remove all {, }, and " characters from MyInputString and store it in output.

         - Added the [*G:...] refence pattern to retrieve game state information. Game state info
           cannot be written (except with the aleady existing functions), but state can be read from
           any API's game state information as long as you know the keys/paths. As an example, if you
           have my EncounterHelper API installed, you can reference the current schema with:
           
           [*G:EncounterHelper:schemaVersion]

           Each component of the state variable tree is separate by colons. If the returned entity is
           an object, it will be stringified before being returned. To get a list of all of the
           state information associated with EncounterHelper, you would use:

           [*G:EncounterHelper]

           Which would return a JSON string representing the stored state data.

v 2.1.10 - Added setting: formatinforequesttext. If set to a non 0 value, will pass the prompt portion of the --i command through the inline formatter.
           Added system;dropoutputlines function. third parameter can be "direct", "gmonly" or "both" and will abandon any --+ and/or --* lines already
           output by the script.
           Bug Fix : Flavor text in roll formula tootips will now display again.

v 2.1.9  - Crash prevention code when rolling on corrupted roll tables that have a blank or non-numeric weight value assigned to an entry.
           Changed the order of setting attributes to use the sheetworker before a direct set.

v 2.1.8  - New looping structures: For...Each, While, and Until. 

           A For...Each loop takes an array a parameter (following the "foreach" identifier) and will iterate over each item in the array. Each 
           time through the loop, the loop control variable will be set to the current item in the array. For the 5E character sheet, the following 
           code would display a list of all of the defined Attacks for a PC:

           !script {{
             --~|array;fromrepeatingsection;Attacks;@{selected|character_id};repeating_attack;atkname
             --%loop|foreach;Attacks
                --+Attack|[&loop]
             --%|
           }}

           Conditional and case statements can use the % and %! branch indicators to continue to the next iteration (%) or exit the loop (%!) as normal.

           ----

           While loops and Until loops function very similarly to each other, and accept a condition after the "while" or "until" keywords. In
           a While loop, the condition is checked before the loop initiates, so it is possible that the loop will not run at all if the condition
           is not true when the loop starts. An Until loop will always run at least once, with the condition being checked at the end. If the
           condition is true as the end of an iteration, the loop will end.

           Both of these loops will generate and display a number that grows until it has 12 digits. 

           !script {{
             --=Iteration|0
             --&MyString|[=1d10 - 1]
             --%loop|while;[&MyString(length)] -lt 12
                --=Iteration|[$Iteration] + 1 
                --+Iteration [$Iteration.Raw]|[&MyString]
                --&MyString|[&MyString][=1d10 - 1]
             --%|
             --+Final|[&MyString], [&MyString(length)]
           }}

           !script {{
             --=Iteration|0
             --&MyString|[=1d10 - 1]
             --%loop|until;[&MyString(length)] -ge 12
                --=Iteration|[$Iteration] + 1 
                --+Iteration [$Iteration.Raw]|[&MyString]
                --&MyString|[&MyString][=1d10 - 1]
             --%|
             --+Final|[&MyString], [&MyString(length)]
           }}

           However, if the initial value of &MyString was, for example, "0123456789012" (13 digits) the while loop would not run at all because 
           the condition is not true when the loop begins. The until loop would run at least once, resulting in a 14 digit number. Note that a
           poorly formed while/until condition can result in an infinite loop, which will cause ScriptCards to reach its statement execution limit
           and abort processing to prevent a sandbox crash. You will get a console log message to that effect if this happens.

           For while and until loops, the % and %! branch indicators in conditional and case statements both exit the loop completely.

v 2.1.7c - When setting attribute values with --!a, the setting will be made normally (with obj.set) and then again with obj.setWithWorker. Note 
           that while this allows sheetworkers to run on the changed value, this happens asynchronously, hence the normal set prior to the worker.

v 2.1.7b - Using object modifiction to set barX_link is now possible, as ScriptCards will locate the attribute ID of the specified attribute on the
           character the token represents and set the link property.

v 2.1.7a - Conditional (--?) and Case (--C) statements now support additional actions for their results. If the first character of a given result
           is a +, a line of output will be generated with the "tag" (bolded) portion of the line separated from the "content" portion by a 
           semicolon. If the first character is a *, a GM-Only output line will be generated following the same format.

           Example:
           !script {{
             --=Roll|1d4
             --+Roll|[$Roll]
             --?[$Roll] -eq 1|*Roll;Was a FUMBLE!|*Roll;Was greater than 1
             --C[$Roll]|1:+Roll;Was a 1!|2:+Roll;Was a 2!|3:+Roll;Was a 3!|4:+Roll;Was a 4!
           }}

v 2.1.7  - Bug fix for setting string values to empty strings as a result of a conditional/case statement.

v 2.1.6  - Additional string variable referencing options are now available. Some options require multiple parmeters, in which case they are
           separated by commas (,). Most of the sequences are case sensitive, though some have "i" variants (icontains, for example) that operate
           in a non-case sensitive mode. NOTE: None of these options modify the value of the string variable - they simply return the result to
           the location in the script where the variable is referenced.

           Examples:
            [&MyString]                      = "The quick Brown Fox jumps over the Lazy Dog"
            [&MyString(length)]              = 43
            [&MyString(tolowercase)]         = "the quick brown fox jumps over the lazy dog"
            [&MyString(touppercase)]         = "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG"
            [&MyString(totitlecase)]         = "The Quick Brown Fox Jumps Over The Lazy Dog"
            [&MyString(replace,quick,fast)]  = "The fast Brown Fox jumps over the Lazy Dog"
            [&MyString(replaceall,o,i)]      = "The fast Briwn Fix jumps iver the Lazy Dig"
            [&MyString(contains,Dog)]        = 1    <-- Case sensitive contains
            [&MyString(contains,dog)]        = 0    <-- Case sensitive contains
            [&MyString(icontains,dog)]       = 1    <-- Non-Case Sensitive contains
            [&MyString(indexof,Jumps)]       = -1   <-- Case sensitive indexof - indexof returns -1 if not found
            [&MyString(iindexof,jumps)]      = 20   <-- Non-case sensitive indexof. First location where the sequence occurs
            [&MyString(lastindexof,o)]       = 41   <-- The character position (0-based) of the last time the sequence occurs

v 2.1.5  - String variable referencing now supports substring parameters if the variable name is followed by parenthesis. 

           Examples:
             [&MyString]         = "The Quick Brown Fox Jumps Over the Lazy Dog"
             [&MyString(4)]      =      "Quick Brown Fox Jumps Over the Lazy Dog"
             [&MyString(4,5)]    =      "Quick"
             [&MyString(-3)]     =                                          "Dog"
             [&MyString(-8,4)]   =                                     "Lazy"

v 2.1.4  - When using --#whisper| with a non-blank value, the output of the emote area would be skipped. This has been fixed.
           Testing new GitHub integration with Discord channel.

v 2.1.3  - Standardized null/undefined comparisons to avoid potential sandbox crashes in many places across the code.

v 2.1.2  - New array definition functions:
           array;fromrepeatingsection;ArrayName;character_id;repeating_section_name;repeating_field_name
             will return an array by looking up all of the repeating section entries on Character_ID for the "repeating_section_name" repeating list
             and return an array consisting of all of the values of repeating_field_name for that section.
           array;fullrepeatingsection;ArrayName;character_id;repeating_section_name;field1:field2:field3;separation_sequence
             will return an array the same as fromrepeatingsection except that multiple fields can be added to the array entries. The returned values
             will be separated in the array entry by separation_sequence. Note that the field list is colon (:) separated.

v 2.1.1  - The built-in turnorder function now supports sorting the turn order: --~turnorder|sort will sort numerically in descending order. adding
           and optional third parameter with a value of either "a" (for ascending) or "u" (for up) will sort numerically in ascending order.

v 2.1.0  - array;stringify now accepts an optional additional parameter that will be used as the separator when joining the array into a string if
           the parameter is present (Ex. --~Result|array;stringify;MyArray;, will result in a comma separated array instead of the default, which
           is separated by the current value of #parameterdelimiter)

         - array;sort and array;numericsort now accept an optional additional parameter. If this is set to "descending", to sort order will be
           reversed (Ex. --~|array;numericsort;MyArray;Descending)
           
         - It is now possible to set token values to blank with --!t-X statements
         
         - Arrays of object IDs can now be retrieved with array;objects:objecttype;filter. Filter is optional, and will correspond to a field on the
           object to check if the field begins with the filter text. The object types are: campaign, player, page, path, text, graphic, character, 
           attribute, ability, handout, macro, rollabletable, tableitem, deck, card, hand, jukeboxtrack, custfx. The filter fields are "name" if the
           object type has a name property, _displayname for players, title for jukeboxtracks, stroke (color) for paths, text for text and not
           supported for campaign, card, and hand objects. Filters are not case sensitive
             Ex: --~|array;objects:handout;MyArray;magic item
           will return an array with the object IDs of all handouts with a name starting with "magic item"

         - The variable reference notation [*O:objectId:objecttype:property] can be used to retrieve any property from any type of object (with the
           standard limitations on bio, notes, etc.) The object types are: campaign, player, page, path, text, graphic, character, attribute, ability,
           handout, macro, rollabletable, tableitem, deck, card, hand, jukeboxtrack, custfx. Note that you are likely better off using the type-specific
           referencing types when available (like [*C:] for campaign, etc.) Note that retrieving the "action" property of a macros and abilities is not
           supported, as this will often lead to a sandbox crash as ScriptCards tries to parse any potential variables in the macro text.

         - Object modification statements (--!) now support the ability to modify any type of object by specifying the object type and object id in the tag
           portion of the statement. Note that very little checking is done on this (if the property you are setting is imgsrc, the image sorce will be
           reformatted per Roll20 requirements). Ex:

             --!graphic:@{selected|token_id}|bar1_value:256
             
           will set the "bar1_vlaue" property of the selected graphic object to 256. As with variable referencing, you are likely better off using the
           specific object type commands (ie, --!t: and --!a:, etc.) when they are available. Note that setting Bio, Notes, and GMNotes will actually make
           the setting, but it isn't immediate and will not necessarially be available if read back within the same script. It will also throw a console
           message about needing to pass a callback.

         - Some cleanup of undocumented and/or orphaned code

v 2.0.5  - Adds the "<" character as a special signifier in conditional (--?) and case (--c) statements. This will cause a return from a subroutine
           if the execution path of the conditional/case would hit the < character (ie, --?1 -eq 1|<)

v 2.0.4  - Some additional sandbox protection when referencing array elements that don't exist and when using some built in functions without
           appropriate parameters

v 2.0.2k - Bug fix for [*R>...] attribute name lookup when using --Rbyindex to locate repeating rows by index number

v 2.0.2j - [@Array()] or [@Array(length)] now returns the number of items in the array, while [@Array(maxindex)] or [@Array(lastindex)] will return
           the index value of the last item (length - 1)

v 2.0.2i - Bug fix when retrieving repeating section values that are purely numeric (was leaving them out of the returned list)

v 2.0.2h - New string function: striphtml will remove all HTML tags from a string.

v 2.0.2g - Minor bug fixes

v 2.0.2f - The subtitle for the card is now run thorugh processInlineFormatting in order to allow buttons and other formatting in that space.

v 2.0.2e - Added the ability to set currentside of a multisided token and have the image update.
           New inline formatting markup: [F#]...[/F] allows you to set an inline font size equal to # px. Ex: [F10]Size 10p/F]

v 2.0.2d - New setting (buttonpadding) allows you to control the size of the space around the text on buttons. The default padding is "5px"

v 2.0.2c - Created a setting (enableattributesubstitution) to control the attribute lookup code added in 2.0.2b. This behavior is off by default.
           It can be turned on by setting this value to a non-zero value. Fix for a potential sandbox crash if trying to access an array member
           using the [@...()] structure without specifying the () portion. Now, a console log message will state that an invalid array reference
           was attempted.

v 2.0.2b - Code added to resolve nested attribute references. For example, if the "skillbonus" attribute on the character contains "@{pb}", the
           intent is to reference the "pb" attribute on the character. Prior to 2.0.2b, ScriptCards was not parsing these nested references to try to get
           the final value as was simply returning the @{pb} text. This behavior only modifies the *S, *T, *- and *R reference structures since these
           attribute references don't apply to anything that isn't a character.

v 2.0.2a - Adds the --Rbyindex subcommand for retrieving a repeating row from a section by index number as an alternative to --Rfirst/--Rnext and --Rfind.
           The syntax is --Rbyindex|<character_id>;<section_prefix>;<indexNumber> so, for example: --Rbyindex|@{selected|character_id};repeating_attack;3
           to retrieve the third item in the repeating_attack list.

v 2.0.2  - Queued for push to OneClick

v 2.0.1b - Fixes a bug in exploding dice (and anything with a reroll) that could cause REALLY weird results

v 2.0.1  - When using [*id:attribute] referencing it is now possible to use a player ID to retrieve player attribute information.

v 2.0.0  - This version is identical to 1.9.9ce, moving the Triggers and subsequent changes out of the experimental branch and into the primary code base.
           Version 2.0.0 will be headed for OneClick.

v 1.9.9ce- EXPERIMENTAL - Adds the ability to set button font sizes inline with the button declaration. Appending :??px (ie, :24px) to a button Opening
           tag will set the font size for that button : [button:24px] for example. IF you use in-line button colors, they must be specified before
           the font size (so [button:#f00:24px] is fine, but [button:24px:#f00] will not generate a button)

v 1.9.9be- EXPERIMENTAL - New settings: titlefontstyle (default "normal") and titlefontweight (default "strong")

v 1.9.9ae- EXPERIMENTAL - Bug fix for Triggers where no destroy:graphic event was assigned

v 1.9.9e - EXPERIMENTAL - Bug fix for sandbox crash when deleting a graphic if there is no trigger defined for destroy:graphic.

v 1.9.8e - EXPERIMENTAL - Minor bug fixes

v 1.9.7e - EXPERIMENTAL - Added the ability to use the VFX system (--v) to send pings to the VTT. Pings are supported for VFX types of "token" and "point".
           To send a ping, simply replace the effect descriptor with "ping". Optionally, and additional "moveall" parameter can be added to the --v command
           to zoom all players viewes to the pinged location: --vtoken|@{selected|token_id} ping moveall
           
v 1.9.6e - EXPERIMENTAL - Small fix for reroll dice formulas not properly displaying the dice results that were dropped/rerolled in the hoverover.

v 1.9.5e - EXPERIMENTAL - This version of ScriptCards supports triggers, or watching for things to happen in your game and responding to them. 
           In addition to the updated experimental version of the script, I have also included a directory on the github with samples and documentation 
           for the Triggers feature. https://github.com/kjaegers/ScriptCards/tree/main/ScriptExamples/trigger_examples

           This documentation will, in some form, eventually make it to the Wiki if/when Triggers leaves the experimental branch. PLEASE let me know if 
           you run into any issues with Triggers or have questions about how they work. Bonus points if someone catches the old school gaming reference 
           in one of the examples (NOT the "on deck..." reference to critical roll) 

v 1.7.7a - Bug fix for rollable tables broken in 1.7.2

v 1.7.7  - Rolled back the ability to set roll components in a conditional or case statement as there was a bug preventing it from setting roll
           variables at all. Will be corrected in the next version, but is disabled for not.

v 1.7.6  - Added the abilityto set roll components with --= (and case or conditional statements). This is accomplished by including the roll component
           suffix, so --=Roll.Total will allow you to set the Total value on a roll without any relationship to the other components (.Aces, .Odds,
           .Raw, etc.) The most obvious usage of this is to set the .Style component to override fumble/crit/both coloring. There are several script
           settings that control this colorization, so if you want to make a 19 or 20 a crit, you could do the following after the roll:
             --?[$Roll.Base] -ge 19|=Roll.Style;[~stylecrit]
           The defined settings are "stylenone", "stylenormal", "stylefumble", "stylecrit", and "styleboth"
           Note that you are not limited to setting just .Style, but any of the roll components. Use your new powers for good!

v 1.7.5  - Two new settings: outputtagprefix and outputcontentprefix. Anthing in these settings will be pre-pended to the tag or content portion of
           all subsequent --+ or --* lines. By default, outputtagprefix is empty and outputcontentprefix contains a single space. You could use these
           to indent lines by using --#outputtagprefix|&nbsp; or something similar. (&nbsp; is the HTML character for non-breaking space).
           Added some additional information to error messages for conditionals when a value can't be identified.

v 1.7.4  - Reworked the parameters code for Object Modification (--!) to allow for a colon (:) in the content of a setting. Included a function from
           The Aaron's TokenMod to clean up an image url to make it appropriate for setting a token's imgsrc value.

v 1.7.3  - Mostly a code cleanup. Removed some commented out sections and cleaned things up a little.
           Initial card parsing now replaces newlines with spaces to attempt to avoid situations where a line ending with a - is confused for the
           start of a new line (previously newlines were simply removed, so a line ending with a dash could look like --- instead of properly ending
           with a dash and then a new command beginning with two dashes)

v 1.7.2  - Corrected a bug in the display of roll text/details if flavor text was added that began with [T or [t. This was due to the inline
           formatting code thinking the hover-over text was trying to create a table.

v 1.7.1  - New in-line rolling syntax. [...] variable referencing constructs now support = as a type, so [=1d20] will in-line roll 1d20 and replace
           the construct with the raw value of the roll. The roll can also be assigned to a roll variable: [=Result:1d20]. Square brackets are not
           supported in inline rolls, and currently + and - are the only component connectors supported.

v 1.7.0  - Code formatting pass by VS Code
           New expanded suffixes for roll variables: .RollCount, .KeptCount, .DroppedCount, .RolledDice(x), .KeptDice(x), and .DroppedDice(x)

v 1.6.9  - Added object creation to the --! statment with --!o. Currently, character objects can be created using --!oc-ReturnVariableName|CharacterName 

v 1.6.8  - The --i command now uses the value set by #parameterdelimiter

v 1.6.7  - Added the #parameterdelimiter setting to allow you to specify the sequence to be used to separate parameters in most ScriptCards commands.

v 1.6.6  - Bug fix for possible sandbox crash when attempting to retrieve token properties during a variable dereferencing call.

v 1.6.5  - Changed the referencing prefix for settings from # to ~, so [~title] will now refence the card's title setting. # was clashing with formatting.
           New setting: 

v 1.6.4b - The turnorder;addcustom function will now (optionally) accept an additional parameter that will be placed in the "formula" value to create
           custom entries that perform a calculation at the beginning of each round.

v 1.6.4a - Reentrant/resumed cards will now update the SC_SelectedTokens array with the tokens that are selected with the script resumes/reenters.

v 1.6.4  - Added the system string variable 'ScriptCards_Version' (ie, [&ScriptCards_Version]) which will match the current version number. Of course,
           for versions prior to 1.6.4, this will return an empty string.
           Added the pre-defined array SC_SelectedTokens, which will be populated with the token IDs of any tokens selected when the script is run.
           Fixed the turnorder;replacetoken function to properly take the turn order update into account. I had previously only fixed turnorder;addtoken

v 1.6.3  - Bug fix for Deadlands-style rolling (post dice parser rewrite, it was adding all the dice together)

v 1.6.2  - Bug fix for rollable table calls ([T#table-name]) in --= statements not functioning. The modified regex for flavor text, (like [STR]) was
           being checked before the roll table syntax and overriding them.

v 1.6.1  - Removed the lookup in the available token attributes table. All current and future token attributes can now be accessed with the t- syntax.

v 1.6.0  - Added the [#settingname] replacable content reference. This can be used to read back any of the settings supported by ScriptCards. For
           example, [#title] will be replaced with the current value of the "title" setting.
           Added 10 new settings (usersetting0 thru usersetting9). These settings are not used by ScriptCards itself, but they are stored when using
           the --Ssettings command and can be reloaded with --Lsettings and provide user configurable storage that can be stored along with named
           setting sets.
           Minor display tweaks to spacing from the output of the dice roll parser. Added code to accomodate the undocumented Roll20 change to the
           turnorder system. The turnorder functions should once again behave as expected.

v 1.5.8  - Modification to the way repeating attributes are filled in to strip @{ and } from sub references so the actual name of the sub attribute
           is returned, which can then be used within a script.

v 1.5.7  - Minor tweak to the roll parser to allow raw numbers to have a # sign after them (it just gets ignored).

v 1.5.6  - Update to disable recursive deferencing of nested attributes until that code can be rewritten, as it was causing a performance issue when
           dealing with repeating row items.

v 1.5.4  - EXPERIMENTAL - Complete rewrite of the roll parsing system, improving the flexibility of the roll parser and correcting a few bugs. Among 
           the improvements are things like being able to add a # on the end of a dice specifier to prevent highlighting based on that die. For example, 
           if you have a 5E to hit roll of "1d20 + 1d4 [Bless] + 5 [Str] + 2 [Prof]" the old system would highlight the roll as a crit if either the d20 
           was a 20 or the d4 was a 4, and the same for a fumble. Now, appending # to any specifier prevents that roll from contributing to the highlight, 
           so "1d20 + 1d4# [Bless] +5 [Str] + 2 [Prof]" will only highlight the roll based off of the d20 roll and not the d4. This update also removes 
           case sensitivity from roll specifiers, doesn't sort the rolls when using kh or kl modifiers, and marks removed rolls with [x#x] (where # is 
           the number that was on the die that got eliminated), and cuts nearly 240 lines out of the code.

v 1.5.3  - Updated the Wild Die support to color-code based on the Wild Die. Red=1 rolled on first die, Green=Ace rolled on first die, yellow for any other 
           value on the wild die.

v 1.5.2  - Added the --a statement, which will play a jukebox track (specified by the Content of the statement). No external APIs are needed for this
           statement to function. Example:
             --a|SwordHitSound
           Tracks need to exist in your Roll20 jukebox, and the name of the track is case senstivie. If the track does not exist in your game, a warning
           message will be sent to the API console log.

v 1.5.1  - Added support for wild die rolling, signified by a W after the side sides. Optionally, can include "S" to drop an initial 1 on the wild die,
           and/or a "X" to drop the highest die rolled if the Wild die is a 1. For example:
           4d6W - Roll 3d6 and 1d6 as a wild die. If the Wild Die acts as an exploding die, rerolling and increasing the total for every 6 rolled.
           4d6WS - As above, but if the Wild Die's first roll is a 1, it will be treated as a 0.
           4d6WX - As above, but if the Wild Die's first roll is a 1, it will replace the highest die among the 3d6.
           4D6WSX - As above, but if the Wild Die's first roll is a 1, it will be treated as a 0 and the highest die among the 3d6 will be eliminated.

v 1.5.0  - Object modification support is now available in ScriptCards. As of 1.5.0, you can use the --! command to modify object properties in the game. 
           This may help reduce the reliance on the --@ command to run other API commands to modify token/character values. The biggest benefit of this is
           that the changes happen as the script is processing, so the new values are available right away. 
           
           The format of the command is:
           --!<objectType>:<objectId>|setting:value|setting:value|setting:value...
           objectType can be one of "t" for token, "c" for character, or "a" for character attribute
           objectId can be a token id or a character id (or "S"/"T" for the Source/Target token/char defined with --#sourcetoken and --#targettoken)
           settings and value pairs can be chained in a single statement separated by | to impact more than one property/attribute with a single line

           Values can be prefixed with += or -= to add/subtract from the current value (no bounds checking is done). Using [*X] notation, the updated
           values can be read immediately. Using += or -= on non-numeric data will simply result in a string append.

           For "a" types, setting names can be prefixed with a ! to create the attribute if it doesn't exist, and postfixed with ^ to set the max
           value instead of the current value.

           Note that there are VERY few attributes associated with a character object, and there are likely few cases where you would want to set anything
           on the character object, but it *is* still possible.
           
           Examples:
             Set the value of bar1_value for the selected token to 5
             --!t:@{selected|token_id}|bar1_value:5

             Add 1 to the bar3_value for the selected token
             --!t:@{selected|token_id}|bar3_value:+=1

             Set bar2_value to 5 and bar2_max to 10 for the selecte token
             --!t:@{selected|token_id}|bar2_value:5|bar2_max:10

             For the character the selected token represents, set "dndstying" attribute on, set "size" to enormous, and set "attitude" to epic. The 
             attitude attribute will be created if it doesn't exist on the character already. The same is not true for dndstying and size:
             --!a:@{selected|token_id}|dndstyling:on|size:enormous|!attitude:epic

             Adds 50 to the npc_xp attribute for the character represented by the selected token, displaying the value before and after the update:
             !script {{
               --+XP|[*@{selected|token_id}:npc_xp]
               --!a:@{selected|token_id}|npc_xp:+=50
               --+XP|[*@{selected|token_id}:npc_xp]
             }}

v 1.4.12 - Added three new roll modifiers: {MAX:X}, {MIN:X}, and {CLAMP:X:Y}. For MAX, the current value of the roll will be reduced to X if it is
           greater than X. For MIN, the current value of the roll will be increased to X if it is lower than X. CLAMP will ensure that the value is
           between the X and Y value (inclusive). X is the smallest allowed value and Y is the largest.
           Corrected an extraneous debug message displayed when making API calls.

v 1.4.11 - Extended the {ROUND} roll modifier to accept a precision level (ie, {ROUND:2} will round the current value to 2 decimal places). The maximum
           supported precision level is 6.

v 1.4.10 - Added function array;numericsort. Same as the array;sort function, except it sorts numerically instead of alphabetically.

v 1.4.9a - Minor tweak to visual style of hover-over text for Fudge dice.

v 1.4.9  - Added support for Fudge dice rolling (XdF) with values of "-", " ", and "+".

v 1.4.8  - Added the ability to set button colors (text and background) inline using [button:#aabbcc:#ddeeff]. The first set of color codes is the text
           color, and the second is the background color. It is not possible to set the background color without setting the text color. Either three or
           six digits can be used for the color codes. At this time, color names are not supported.

v 1.4.7  - Added XdY!h and XdY!l roll formulas to support Deadlands-style rolls. This notation means roll dY X times, with exploding dice on accessing
           (the max value on the die) and keep either the highest (h) or lowest (l) result.

v 1.4.6  - Corrected sandbox crash introduced in 1.4.5 (findObj vs findObjs)... *sigh*
           Added support for AirBag Crash Handler API Script (if installed)

v 1.4.5  - Added deferral character support for get and set Meta APIs. "get" or "set" followed by the deferral character (default ^) and a . will
           be replaced with "get.", so "get^.mule" becomes "get.mule" when the --@ call is made. Currently multiple deferral characters are not
           supported (ie, get^^.) but I can look to add that support if necessary.

v 1.4.4  - Updated distance calculations to take page scale (snapping_increment) into account
         - Added setting options for rollhilightcolornormal, rollhilightcolorcrit, rollhilightcolorfumble, and rollhilightcolorboth to allow the
           color of the box around rolls to be customized.

v 1.4.3  - Integer (rounded) division was only valid when using constants as the divisior. For other types of divisors the integer division
           operator was being ignored. This has been fixed.
         - Removed some extraneous debug console logging.
         - Added more detail to the missing label error message that gets logged to the console to help identify the problematic line.

v 1.4.2  - Added several additional roll modifiers, including {SIN}, {COS}, {TAN}, {ASIN}, {ACOS}, {ATAN}, {SQUARE}, {CUBEROOT}, {CUBE}
         - Added setting (--#) called "rollhilightlineheight" which can be used to set the size of the roll hilight box. This is useful if you
           have increased the lineheight setting and want the hilight box to expand as well.
         - Fixed the incorrect handling of negative numbers in roll parsing for operations other than addition (which just became subtraction :))

v 1.4.1  - Added math/sqrt function and {SQRT} roll modifier.
         - Fixed abs, min, and max functions that got broken at some point.
         - Fixed a potential sandbox crash if incorrect/missing parameters were passed to replaceVariableContent

v 1.4.0  - (Notes cover 1.4.0 thru 1.4.0e)
         - Switched to all GitHub based distribution - The GISTs will no longer be updated
         - Added code to clean HTML out of button captions to prevent non-working buttons
         - New settings (--#) to support emote fonts: emotefont, emotefontweight, emotefontsize, emotefontcolor
         - Added option parameter to the array/pagetokens function to specify "all", "char", "pc", "npc", or "graphic" to filter returned tokens
         - Added array/sort function
         - Added support for t-lightcolor token attribute
         - Fixed a bug in the Roll Parser that would prevent it from rolling on rollable tables with "-" in the name.
         - Cleaned up spacing in the script (JSherwood)
         - The roll parser now treats numbers in parenthesis as just plain numbers (JSherwood)

v 1.3.9  - (Notes cover 1.3.9 thru 1.3.9c)
         - Added math/angle function to get the angle between two tokens
         - Rewrote the repeating function code to vastly speed up dealing with repeating sections
         - Added array/setatindex function
         - Rewrote [hr] replacement code to be more visually friendly.
         - Added system/findability function to return the object id reference of an ability on a character
         - Added setting (--#) for titlefontshadow

v 1.3.8  - Bug fixes for & variable references and use of non-existant variable names
         - Added system/date/getraw function
         - Added support for settings name aliases for nominmaxhilight/nominmaxhighlight

v 1.3.7  - New Background Image Settings: "bodybackgroundimage", "evenrowbackgroundimage", "oddrowbackgroundimage" and "buttonbackgroundimage". Setting body, even, or odd 
           to anything will result in the colors for those items (both for body, odd for odd, and even for even) being set to #00000000 (transparent) automatically, so if 
           you want some color to overlay the background image, you'll need to set the appropriate color after setting the background image.
         - The buttontextcolor setting can how accept named colors instead of just hex codes.
         - Added system/dumpvariables function for debugging scripts
         - Bug Fix: Corrected a bug that could (in very rare circumstances) cause unexpected behavior when setting the activepage setting.
         - Bug Fix: Tokens that don't represent characters can now have their properties retrieved with t- notation.

v 1.3.6  - (Notes cover 1.3.6 thru 1.3.6b)
         - The buttontextcolor has been modified to accept either hex color codes or named colors.
         - Tweaked regex expression for variable substitution that supports extended characters (accented, etc.)
         - If you save a card setting list (with --ssettings) and name it "Default" (case sensitive) it will be loaded at the start of every script. You can always load 
           another set (which will be merged with Default) or remove the "Default" set to alter this behavior.
         - Bug Fix: The nominmaxhighlight "fix" from 1.3.5 broke roll highlighting completely. It is repaired now.
         - New Setting: norollhighlight. If set to a value other than the default ("0"), will not place any highlight box around rolls generated while the setting is active. 
           This will still add a tooltop, and can be used when you wish to pass the roll to something else without the yellow/green/blue/red box around the roll.
         - New Setting: titlecardbackgroundimage. Default is empty. If set, the value will be applied to the css "background-image" tag for the title card. This should be a 
           full CSS specifier, like "url(https://mywebsite.domain/path/to/image.png)".
         - New Setting: titlecardgradient. If not "0", will apply a gradient overlay to the title card background color. Default is no gradient. NOTE: This setting actually 
           overrides the titlecardbackground setting, and the two cannot be used together. You can either have a gradient or have a background image.

v 1.3.5  - Bug Fix: Restored functionality to the "nominmaxhilight" setting.
         - New readsetting sub-function: This function is part of the "system" function group, and allows you to retrieve the current value of a ScriptCards setting as a string
         - New findtoken Sub-function: Added the "findtoken" subfunction to turn order, which will return the initiative tracker value of the indicated token
         - New Settings: Added two new settings (locale and timezone) to support the date functions below.
         - New system/date functions: Added the "date" sub-function category with three options: "getdatetime", "getdate" and "gettime". These functions utilize the "timezone" 
           and "locale" settings to return localized time. Note that the locale setting currently has no effect, as this does not appear to be active/enabled in the Roll20 
           javascript engine - but timezone does work properly.

v 1.3.1  - Behavior Change: Rewrote all content substitution code as a single function that works from the innermost set of references outward, so something like  &wow[$count[&suffix]]] 
           will process [&suffix] first, then [$countX] where X is the result of [&suffix] and finally [&wow1] where 1 is the result of [$countX]. This makes the language more logical 
           and variable resolution more deterministic. It is also a huge performance improvement, since the way variables were replaced previously was highly non-optimal. NOTE: as a 
           side effect of this change, some of the uncommonly used settings (disablerollvariableexpansion and similar) will not function at this time. They were primarily for debugging 
           purposes and will return in a future update, but won't have an effect at this time.
         - Array Referencing: It is now possible to reference array items directly with the [@arrayName(index)] syntax. The first element of the array is index 0, etc.
         - Additional Roll Variable Suffix: You can now use ".Raw" suffix when referencing a roll variable to skip formatting the result as a roll. This shouldn't normally be necessary, 
           as roll formatting is only done on --+ and --* lines, but it is available, especially given the special note in the previous item.
         - Behavior Change: When generating tooltips (and only when generating tooltips) for roll variable display, the "~" character will be removed. This makes it easier to hide 
           what look like rolls from the chat server when referencing nested values (ie, [~[&shortSaveNameUpper]~]) when you just want the value of the variable in square brackets as 
           an explanation, since using [[&shortSaveNameUpper]] would look like an inline roll to the chat server.
         - Feature Update: Added support for new token properties added to Roll20 on 2021-06-03 (bar_location, compact_bar, light_sensitivity_multiplier, and night_vision_effect). 
           As with all token references, these are made with the "t-" prefix.

v 1.2.9  - Bug Fix - The "after" string function will now omit the specified separator from the value it returns.
         - Formatting - No functional change, but apparently at some point I hilighted the whole script in VSCode and hit tab a couple of times and indented everything. I fixed that :) 
           I've also begin adding more verbose comments throughout the code. That will continue as a work in progress.
         - Custom VFX for Point effects - The relatively new "--Vpoint" effect statement now supports custom FX.
         - New Distance Functions - Two new distance functions are available. "euclideanpixel" will return the raw pixel distance between two tokens (without dividing by 70). "euclideanlong"
           will return the unit distance, but divides the result by 70 AFTER calculating the distance to reduce rounding errors over very long ranges.
         - New String Functions - "replaceall" will replace all occurrences of the search string in the source text (replace replaces only the first occurrence). "trim" will remove spaces 
           from the beginning and end of the string.
         - Behavior Change - I have added a new setting value called "executionlimit", with a default of 30000. When processing a script, the number of lines executed is tracked. If that 
           number exceeds "executionlimit", ScriptCards will log an error message to the API console and abort execution of the script. If you need to execute more than 30000 lines of code, 
           just set the parameter higher for that particular script (i.e. : --#executionlimit|100000). The intent here is to prevent scripting logic errors from crashing the sandbox with an 
           infinite loop. My lightningbolt and fireball macros in VERY crowded areas don't hit the 30000 limit, so it should be good for most scripts. I can always up the default if there 
           are issues.
         - Deferred Meta Script Resolution - I mentioned this in 1.2.8a, but I've expanded on it a bit. As some more detail, when calling another API script with ScriptCards via 
           the --@ statement, it is now possible to include some meta script (SelectManager, Fetch) by inserting a deferral character into the meta call. 

v 1.2.8  - Added beginnings of deferral character support for including references to meta scripts inside a scriptcard.
         - New String Functions: replaceall and trim. replaceall works just like replace except it will replace all occurrences of the search string. Trim will remove spaces from the 
           beginning and end of the string.
         - New VFX Option: You can now spawn visual effects and arbitrary points with the --Vpoint| command. The parameters (separated by spaces) are X Y shape-color, and are measured in pixels. 
           If #activepage is set, the VFX will play on that page. Otherwise it will default to the player ribbon page. 
         - New Roll Parser Functions: As you may know, the ScriptCards roll parser works from left to right, always maintaining a current value and applying whatever comes next to the total. 
           This has allowed me to add some in-line functions to the roll parser. These are {ABS} - Absolute value, {CEIL} - Ceiling value (round up to the next whole number) {FLOOR} - Floor value 
           (round down to the next whole number), {ROUND} - Round value (round up if the decimal portion is greater than 0.5, otherwise round down), {NEGATE} - Multiply the value by negative one.

v 1.2.7  - Bug Fix: Corrected a bug introduced in 1.2.3 that would return "undefined" for token/character references ([*x:] syntax) that were 0 or null. (Thanks Will M.)
         - Data Statements: Support for BASIC-style read/data statements with the --d statement has been added. Data can be defined anywhere in your script with the --d!|element1;element2;element3;etc... 
           statement. Data is pre-processed into a structure that can be read with the --dVarName| command to read the next available data element into a string variable called "VarName". When attempting 
           to read past the last available element, a value of "EndOfDataError" will be returned. You can reset the data pointer to begin reading again from the beginning with --d<|. 
         - For...Next Loops: It is now possible to create For...Next loops in ScriptCards with the --% statement type. A loop is defined by starting off with --%LoopCounter|<start>;<end>;[step]
           The <start> and <end> values are required, while the [step] parameter is optional. If the step is omitted, it will be assumed to be 1. A string variable (in this case called "LoopCounter")
           will be created and will hold the current iteration value for the loop. The end of the loop is signified by --%|, which will increment the counter and check to see if the end point has been
           passed. If not, execution will return to the statement after the initial --% statement. Loops CAN be nested within each other, and the step value can be negative if you wish to run a loop 
           downwards. A conditional can end the current iteration of a loop with the % character, or break out of the loop entirely with %!. Finally, modifying the LoopCounter variable will not have any 
           impact on the loop or the number of iterations it runs. When execution returns to the top of the loop, the value of the variable will be reset to the current loop counter, which is 
           tracked internally.
         - Conditional Code Blocks: Added the ability to define blocks of code in association with conditional statements. This is similar to begin...end or curly braces in some languages, though a bit 
           more limited. As part of the true or false execution branch of a conditional, you can use the "[" character to begin a code block. If that execution path is taken, the code in the block will be 
           executed. Otherwise, the code in the block will be skipped. Blocks are completed with the --]| statement, and can optionally include an "else" block by using --]|[ as the block terminator. 
           At this time, blocks cannot be nested, and can only be created as part of a conditional (--[ is not a valid statement type)

v 1.2.3  - It is now possible to retrieve object properties from characters (as opposed to just attributes). Things like "controlledby" are now available. Unfortunately, notes, gmnotes, and bio are not
           available because of the way they have to be retrieved by the API.
         - Tag portions of a line are now trimmed, meaning trailing spaces should no longer cause them to be included at the end of variable names. Spaces inside variable names should still be fine. 
           Trimming was already happening on the content side of a statement.
         - ScriptCards will now replace inline rolls with their total results, so it should be possible to use a syntax like:
                  --=AC|[[ @{selected|armorclass} ]]
                  --+AC|[$AC]
           but note that ONLY the total result will be used by ScriptCards. It will not break the roll down into components like to normal roll parser does. This does allow quite a bit more flexibility
           for totally insane sheet calculations, however :) I still recommend using the internal roll parser for most things, but at least this will let you set variables for things like 3.5 AC.
         - New Functions: Added three new string functions: tolowercase, touppercase, and totitlecase. Each just takes the string to process as the only additional parameter and returns the result 
           to the string variable named in the tag portion of the statement. "tolowercase" and "touppercase" are fairly obvious. "totitlecase" capitalizes the first letter of each word in the string 
           (note that it doesn't account for things like not capitalizing "a" or "of", etc.)
         - Behavior Change: setting the sourcetoken or targettoken to a non-existent token or something that doesn't represent a character will now clear the internal cached character object as well. 
           This would be useful it you wanted to set a source/target for use with [*S:] or [*T:] notation but didn't want to display tokens in the emote section. Simply setting them to nothing 
           (--#sourcetoken|) before the end of the script will remove the references.

v 1.2.2  - Passing empty parameters should once again be supported.
         - You can also use either single or double quotes around parameters that contain a semicolon (I found some regex to parse CSV files and just changed the comma to a semicolon). 
         - You can now set an active page with the --#activepage|pageid setting. If you use "playerpage" as the page id, the current ribbon page will be used (so, --#activepage|playerpage) 
           or (see next item) --#activepage|[*C:playerpageid]
         - There are two new [*X:] attribute accessing options : [*C:attribute] will retrieve campaign-level attributes. Probably the only really useful one is "playerpageid", but they are all 
           available. [*P:attribute] will retrieve attributes on the activepage (which must be set beforehand). All of the UDL items should be available here, though I don't use UDL so I'm not 
           familiar with them.
         - Retrieving token GMNotes will (with something like [*T:t-gmnotes], or [*-sometokenid:t-gmnotes] will now run the result through decodeURIcomponent to get rid of the URI encoding as 
           return the notes as expected. Formatting like bold and italics, etc. should still work. 